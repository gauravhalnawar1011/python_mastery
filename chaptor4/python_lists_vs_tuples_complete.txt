# Python Lists and Tuples: From Basics to Advanced

------------------------------------------------------------
## 1. Introduction

### What is a List?
- A **list** is a collection of items in Python.
- Ordered, indexed, allows duplicates, and **mutable** (can be modified).

Example:
```python
fruits = ["apple", "banana", "cherry"]
```

### What is a Tuple?
- A **tuple** is also a collection of items.
- Ordered, indexed, allows duplicates, but **immutable** (cannot be changed after creation).

Example:
```python
fruits_tuple = ("apple", "banana", "cherry")
```

------------------------------------------------------------
## 2. Key Properties

| Feature          | List ✅            | Tuple ❌           |
|------------------|--------------------|--------------------|
| Ordered          | ✔ Yes              | ✔ Yes              |
| Indexed          | ✔ Yes              | ✔ Yes              |
| Duplicates       | ✔ Allowed          | ✔ Allowed          |
| Mutable          | ✔ Yes              | ❌ No (Immutable)  |
| Methods          | Many               | Very Few (count, index) |

------------------------------------------------------------
## 3. Creating Lists and Tuples

```python
# List
my_list = [1, 2, 3, "hello", True]

# Tuple
my_tuple = (1, 2, 3, "hello", True)

# Empty
empty_list = []
empty_tuple = ()

# Single-element tuple (note the comma)
single_tuple = (5,)
```

------------------------------------------------------------
## 4. Accessing Elements

```python
fruits = ["apple", "banana", "cherry"]

print(fruits[0])     # apple
print(fruits[-1])    # cherry (negative indexing)
print(fruits[0:2])   # ['apple', 'banana'] (slicing)
```

------------------------------------------------------------
## 5. Iteration

```python
# Loop through list
for fruit in fruits:
    print(fruit)

# Loop with index
for i, fruit in enumerate(fruits):
    print(i, fruit)

# List comprehension
squares = [x**2 for x in range(5)]  # [0,1,4,9,16]

# Tuple unpacking
person = ("John", 25, "Developer")
name, age, job = person
print(name, age, job)
```

------------------------------------------------------------
## 6. List Methods

| Method            | Description                           |
|-------------------|---------------------------------------|
| append(x)         | Add element at end                   |
| extend(iterable)  | Add multiple elements at end          |
| insert(i, x)      | Insert element at index               |
| remove(x)         | Remove first occurrence               |
| pop([i])          | Remove and return element             |
| clear()           | Remove all items                      |
| index(x)          | Find index of first occurrence        |
| count(x)          | Count occurrences                     |
| sort()            | Sort list                             |
| reverse()         | Reverse order                         |
| copy()            | Shallow copy                          |

Example:
```python
nums = [3, 1, 4, 1, 5]
nums.sort()
print(nums)  # [1,1,3,4,5]
```

------------------------------------------------------------
## 7. Tuple Methods

- **count(x)** → Count occurrences of x
- **index(x)** → Return index of x

Example:
```python
nums = (1, 2, 3, 2, 2)
print(nums.count(2))  # 3
print(nums.index(3))  # 2
```

------------------------------------------------------------
## 8. Advanced Usage

### Nested Lists/Tuples
```python
nested_list = [[1, 2], [3, 4]]
nested_tuple = ((1, 2), (3, 4))

print(nested_list[0][1])   # 2
print(nested_tuple[1][0])  # 3
```

### Packing & Unpacking
```python
# Packing
numbers = 1, 2, 3  # Tuple packing

# Unpacking
a, b, c = numbers
print(a, b, c)  # 1 2 3
```

### Tuple Immutability Trick
```python
# You cannot modify tuple directly,
# but if it contains a mutable object, that object can change

t = (1, [2, 3])
t[1][0] = 99
print(t)  # (1, [99, 3])
```

------------------------------------------------------------
## 9. Differences Between List and Tuple

| Aspect          | List (Mutable) ✅          | Tuple (Immutable) ❌       |
|-----------------|----------------------------|----------------------------|
| Performance     | Slower (more memory)       | Faster (lightweight)       |
| Use case        | Dynamic data (changing)    | Fixed data (constant)      |
| Methods         | Many                       | Few (count, index)         |

------------------------------------------------------------
## 10. Interview Tips

- **Lists** → Use when data changes frequently.  
- **Tuples** → Use when data is constant (e.g., coordinates, database keys).  
- Tuples can be used as **dictionary keys** (hashable), lists cannot.  
- Memory efficiency: Tuples take less memory than lists.  
- Use `in` operator to check membership in both.  

------------------------------------------------------------
✅ Quick Summary:
- List → Mutable, more methods, use for dynamic data.  
- Tuple → Immutable, lightweight, use for fixed data.  
